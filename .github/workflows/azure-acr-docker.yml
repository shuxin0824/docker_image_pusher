name: Azure ACR Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: "${{ secrets.AZURE_CONTAINER_REGISTRY }}"  # Azure ACR 登录地址
  AZURE_NAME_SPACE: "default"  # 默认命名空间，可修改为自定义值

jobs:

  build:
    name: Pull and Push to Azure ACR
    runs-on: ubuntu-latest

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以开启以下选项
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure ACR
      run: |
        az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    - name: Build and push images to Azure ACR
      run: |
        # 数据预处理，检测镜像是否重复
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"  # 删除 @sha256
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            name_space="${name_space}_"
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            if [[ -n "${temp_map[$image_name]}" ]]; then
                if [[ "${temp_map[$image_name]}" != $name_space ]]; then
                    duplicate_images[$image_name]="true"
                fi
            else
                temp_map[$image_name]=$name_space
            fi       
        done < images-acr.txt

        # 拉取镜像、打标签并推送到 Azure ACR
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            echo "Pulling image: $line"
            docker pull $line
            
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            platform_prefix=""
            if [[ -n "$platform" ]]; then
                platform_prefix="${platform//\//_}_"
            fi

            image=$(echo "$line" | awk '{print $NF}')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
                if [[ -n "$name_space" ]]; then
                    name_space_prefix="${name_space}_"
                fi
            fi
            
            image_name_tag="${image_name_tag%%@*}"
            new_image="$AZURE_CONTAINER_REGISTRY/$AZURE_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            echo "Tagging image: $image -> $new_image"
            docker tag $image $new_image
            echo "Pushing image: $new_image"
            docker push $new_image
            
            echo "Cleaning up disk space"
            docker rmi $image
            docker rmi $new_image
        done < images-acr.txt
