name: Push Docker Images to Azure ACR (China Region)

on:
  workflow_dispatch:  # 支持手动触发

jobs:
  push-to-acr:
    name: Pull and Push Docker Images to Azure ACR
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Login to Azure and ACR
      - name: Login to Azure and Azure ACR (China Region)
        run: |
          # 从 AZURE_CREDENTIALS 解析服务主体信息
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')

          echo "切换到 Azure 中国区云环境..."
          az cloud set --name AzureChinaCloud

          echo "登录到 Azure..."
          az login --service-principal \
            -u "${CLIENT_ID}" \
            -p "${CLIENT_SECRET}" \
            --tenant "${TENANT_ID}" || exit 1

          echo "登录到 Azure ACR..."
          az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }} || exit 1

      # Step 3: Read images-acr.txt, Pull, Tag, and Push Docker Images
      - name: Process Docker Images from images-acr.txt
        run: |
          echo "开始处理 images-acr.txt 文件中的 Docker 镜像..."
          # 定义 ACR 基础路径
          ACR_BASE="${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.cn"

          # 初始化镜像重复检测变量
          declare -A duplicate_images
          declare -A temp_map

          # 预处理镜像列表，检测重复命名
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" ]] && continue
              if echo "$line" | grep -q '^\s*#'; then
                  continue
              fi
              
              image=$(echo "$line" | awk '{print $NF}')
              image="${image%%@*}"  # 删除 @sha256 等后缀
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
              name_space="${name_space}_"
              image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
              
              # 检测镜像命名是否冲突
              if [[ -n "${temp_map[$image_name]}" ]]; then
                  if [[ "${temp_map[$image_name]}" != $name_space ]]; then
                      duplicate_images[$image_name]="true"
                  fi
              else
                  temp_map[$image_name]=$name_space
              fi
          done < images-acr.txt

          # 处理镜像列表，拉取、打标签并推送到 ACR
          while IFS= read -r line || [ -n "$line" ]; do
              [[ -z "$line" ]] && continue
              if echo "$line" | grep -q '^\s*#'; then
                  continue
              fi

              echo "Pulling image: $line"
              docker pull $line || exit 1

              # 获取平台架构信息
              platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
              platform_prefix=""
              if [[ -n "$platform" ]]; then
                  platform_prefix="${platform//\//_}_"
              fi

              image=$(echo "$line" | awk '{print $NF}')
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
              image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
              name_space_prefix=""
              if [[ -n "${duplicate_images[$image_name]}" ]]; then
                  if [[ -n "$name_space" ]]; then
                      name_space_prefix="${name_space}_"
                  fi
              fi

              image_name_tag="${image_name_tag%%@*}"
              new_image="${ACR_BASE}/library/${platform_prefix}${name_space_prefix}${image_name_tag}"

              echo "Tagging image: $image -> $new_image"
              docker tag $image $new_image || exit 1

              echo "Pushing image: $new_image"
              docker push $new_image || exit 1

              # 清理本地镜像
              echo "清理本地镜像: $image 和 $new_image"
              docker rmi $image
              docker rmi $new_image
          done < images-acr.txt
